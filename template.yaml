AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  QuickstartApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: QuickstartApi
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /items:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getItems.Arn}/invocations
              responses: {}
          /newItems:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${newItem.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        AllowHeaders: '''Authorization,Content-Type'''
        AllowOrigin: '''*'''
  newItem:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-newItem
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: newItem
      CodeUri: src/newItem
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref SampleMySQLRDSRootUserSecret
        - Statement:
            - Effect: Allow
              Action:
                - rds-data:BatchExecuteStatement
                - rds-data:BeginTransaction
                - rds-data:CommitTransaction
                - rds-data:ExecuteStatement
                - rds-data:RollbackTransaction
              Resource:
                - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${SampleMySQLRDS}
      Events:
        QuickstartApiPOSTnewItems:
          Type: Api
          Properties:
            Path: /newItems
            Method: POST
            RestApiId: !Ref QuickstartApi
      Environment:
        Variables:
          DB_ID: !Ref SampleMySQLRDS
          DB_ADDRESS: !GetAtt SampleMySQLRDS.Endpoint.Address
          DB_PORT: !GetAtt SampleMySQLRDS.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${SampleMySQLRDS}
          DB_ROOT_USER_SECRET_ARN: !Ref SampleMySQLRDSRootUserSecret
  getItems:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-getItems
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: getItems
      CodeUri: src/getItems
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref SampleMySQLRDSRootUserSecret
        - Statement:
            - Effect: Allow
              Action:
                - rds-data:BatchExecuteStatement
                - rds-data:BeginTransaction
                - rds-data:CommitTransaction
                - rds-data:ExecuteStatement
                - rds-data:RollbackTransaction
              Resource:
                - !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${SampleMySQLRDS}
      Events:
        QuickstartApiGETitems:
          Type: Api
          Properties:
            Path: /items
            Method: GET
            RestApiId: !Ref QuickstartApi
      Environment:
        Variables:
          DB_ID: !Ref SampleMySQLRDS
          DB_ADDRESS: !GetAtt SampleMySQLRDS.Endpoint.Address
          DB_PORT: !GetAtt SampleMySQLRDS.Endpoint.Port
          DB_ARN: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${SampleMySQLRDS}
          DB_ROOT_USER_SECRET_ARN: !Ref SampleMySQLRDSRootUserSecret
  SampleMySQLRDS:
    Type: AWS::RDS::DBCluster
    Properties:
      BackupRetentionPeriod: 1
      DBSubnetGroupName: !Ref SampleMySQLRDSSubnetGroup
      Engine: aurora
      EngineMode: serverless
      MasterUsername: !Sub '{{resolve:secretsmanager:${SampleMySQLRDSRootUserSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${SampleMySQLRDSRootUserSecret}:SecretString:password}}'
      EnableHttpEndpoint: true
      ScalingConfiguration:
        AutoPause: false
        MinCapacity: 2
        MaxCapacity: 256
      StorageEncrypted: true
      VpcSecurityGroupIds:
        - !Ref SampleMySQLRDSSecurityGroup
  SampleMySQLRDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
        - ResourceName: SampleMySQLRDS
      SubnetIds: !Ref DefaultVPCSubnets
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Subnets
            - ResourceName: SampleMySQLRDS
  SampleMySQLRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Database Security Group
      SecurityGroupIngress:
        CidrIp: 0.0.0.0/0
        FromPort: 3306
        IpProtocol: tcp
        ToPort: 3306
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName} VPC Security Group
            - ResourceName: SampleMySQLRDS
      VpcId: !Ref DefaultVPCId
  SampleMySQLRDSRootUserSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub
        - Root user login info for Stack ${StackTagName} Environment ${EnvironmentTagName} Database ${ResourceName}
        - ResourceName: SampleMySQLRDS
      GenerateSecretString:
        SecretStringTemplate: '{"username": "root"}'
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
      Name: !Sub /${EnvironmentTagName}/${StackTagName}/SampleMySQLRDS/RootUser
  SampleMySQLRDSRootUserSecretAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref SampleMySQLRDSRootUserSecret
      TargetId: !Ref SampleMySQLRDS
      TargetType: AWS::RDS::DBCluster
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)
  DefaultVPCId:
    Type: AWS::EC2::VPC::Id
    Description: AWS account-specific default VPC ID (injected by Stackery at deployment time)
  DefaultVPCSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: AWS account-specific default VPC subnets (injected by Stackery at deployment time)