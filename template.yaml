AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  QuickstartApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: QuickstartApi
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /items:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getItems.Arn}/invocations
              responses: {}
          /newItems:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${newItem.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        AllowHeaders: '''Authorization,Content-Type'''
        AllowOrigin: '''*'''
  newItem:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-newItem
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: newItem
      CodeUri: src/newItem
      Handler: newItem.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref Items
        - AWSLambdaENIManagementAccess
      Events:
        QuickstartApiPOSTnewItems:
          Type: Api
          Properties:
            Path: /newItems
            Method: POST
            RestApiId: !Ref QuickstartApi
      Environment:
        Variables:
          TABLE_NAME: !Ref Items
          TABLE_ARN: !GetAtt Items.Arn
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt InternalVPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref InternalVPCPrivateSubnet1
          - !Ref InternalVPCPrivateSubnet2
  getItems:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-getItems
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: getItems
      CodeUri: src/getItems
      Handler: getItems.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref Items
        - AWSLambdaENIManagementAccess
      Events:
        QuickstartApiGETitems:
          Type: Api
          Properties:
            Path: /items
            Method: GET
            RestApiId: !Ref QuickstartApi
      Environment:
        Variables:
          TABLE_NAME: !Ref Items
          TABLE_ARN: !GetAtt Items.Arn
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt InternalVPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref InternalVPCPrivateSubnet1
          - !Ref InternalVPCPrivateSubnet2
  Items:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
  InternalVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName}
            - ResourceName: InternalVPC
  InternalVPCPrivateSubnet1:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 0
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 1
            - ResourceName: InternalVPC
      VpcId: !Ref InternalVPC
  InternalVPCPrivateSubnet2:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 1
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 2
            - ResourceName: InternalVPC
      VpcId: !Ref InternalVPC
  InternalVPCPublicSubnet1:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs ''
      CidrBlock: !Select
        - 2
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnet 1
            - ResourceName: InternalVPC
      VpcId: !Ref InternalVPC
  InternalVPCPublicSubnet2:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs ''
      CidrBlock: !Select
        - 3
        - !Cidr
          - 10.0.0.0/16
          - 4
          - 14
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnet 2
            - ResourceName: InternalVPC
      VpcId: !Ref InternalVPC
  InternalVPCPrivateSubnet1NatGatewayEIP:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  InternalVPCPrivateSubnet1NatGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt InternalVPCPrivateSubnet1NatGatewayEIP.AllocationId
      SubnetId: !Ref InternalVPCPublicSubnet1
  InternalVPCPrivateSubnet1RouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 1 Route Table
            - ResourceName: InternalVPC
      VpcId: !Ref InternalVPC
  InternalVPCPrivateSubnet1NatGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref InternalVPCPrivateSubnet1NatGateway
      RouteTableId: !Ref InternalVPCPrivateSubnet1RouteTable
  InternalVPCPrivateSubnet1RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InternalVPCPrivateSubnet1RouteTable
      SubnetId: !Ref InternalVPCPrivateSubnet1
  InternalVPCPrivateSubnet2NatGatewayEIP:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  InternalVPCPrivateSubnet2NatGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt InternalVPCPrivateSubnet2NatGatewayEIP.AllocationId
      SubnetId: !Ref InternalVPCPublicSubnet2
  InternalVPCPrivateSubnet2RouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Private Subnet 2 Route Table
            - ResourceName: InternalVPC
      VpcId: !Ref InternalVPC
  InternalVPCPrivateSubnet2NatGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref InternalVPCPrivateSubnet2NatGateway
      RouteTableId: !Ref InternalVPCPrivateSubnet2RouteTable
  InternalVPCPrivateSubnet2RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InternalVPCPrivateSubnet2RouteTable
      SubnetId: !Ref InternalVPCPrivateSubnet2
  InternalVPCPublicSubnetsInternetGateway:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnets Internet Gateway
            - ResourceName: InternalVPC
  InternalVPCPublicSubnetsInternetGatewayAttachment:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternalVPCPublicSubnetsInternetGateway
      VpcId: !Ref InternalVPC
  InternalVPCPublicSubnetsRouteTable:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Virtual Network ${ResourceName} Public Subnets Route Table
            - ResourceName: InternalVPC
      VpcId: !Ref InternalVPC
  InternalVPCPublicSubnetsInternetGatewayRoute:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternalVPCPublicSubnetsInternetGateway
      RouteTableId: !Ref InternalVPCPublicSubnetsRouteTable
  InternalVPCPublicSubnet1RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InternalVPCPublicSubnetsRouteTable
      SubnetId: !Ref InternalVPCPublicSubnet1
  InternalVPCPublicSubnet2RouteTableAssociation:
    Metadata:
      StackeryManaged: true
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref InternalVPCPublicSubnetsRouteTable
      SubnetId: !Ref InternalVPCPublicSubnet2
  CallSearch:
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: callsearch
      ElasticsearchClusterConfig:
        DedicatedMasterEnabled: 'true'
        InstanceCount: '2'
        ZoneAwarenessEnabled: 'true'
        InstanceType: m4.large.elasticsearch
        DedicatedMasterType: c4.large.elasticsearch
        DedicatedMasterCount: '3'
      ElasticsearchVersion: 7.4
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 20
        VolumeType: gp2
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action: es:ESHttp*
            Resource: arn:aws:es:us-east-2:937845247459:domain/callsearch/*
      VPCOptions:
        SecurityGroupIds:
          - !GetAtt InternalVPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref InternalVPCPrivateSubnet1
          - !Ref InternalVPCPrivateSubnet2
  Bastion:
    Type: AWS::AutoScaling::AutoScalingGroup
    Metadata:
      StackeryType: bastion
    Properties:
      LaunchConfigurationName: !Ref BastionLaunchConfiguration
      MaxSize: 2
      MinSize: 1
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Bastion ${ResourceName} Instance
            - ResourceName: Bastion
          PropagateAtLaunch: true
      VPCZoneIdentifier:
        - !Ref InternalVPCPublicSubnet1
        - !Ref InternalVPCPublicSubnet2
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
  BastionIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      RoleName: !Sub ${AWS::StackName}-Bastion
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: BastionPermissions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                  - ec2:DescribeTags
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:log-group:/stackery/bastion/*
                  - arn:aws:logs:*:*:log-group:/stackery/bastion/*:log-stream:*
  BastionIAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BastionIAMRole
  BastionInstancesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Bastion Instances Security Group
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
      Tags:
        - Key: Name
          Value: !Sub
            - Stack ${StackTagName} Environment ${EnvironmentTagName} Bastion ${ResourceName} Instances Security Group
            - ResourceName: Bastion
      VpcId: !Ref InternalVPC
  BastionLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref BastionIAMInstanceProfile
      ImageId: !Ref AmazonLinux2ImageId
      InstanceType: t2.nano
      SecurityGroups:
        - !Ref BastionInstancesSecurityGroup
      UserData: !Base64
        Fn::Sub:
          - |-
            Content-Type: multipart/mixed; boundary="==BOUNDARY=="
            MIME-Version: 1.0

            --==BOUNDARY==
            MIME-Version: 1.0
            Content-Type: text/x-shellscript

            #!/bin/bash
            # Install awslogs, the jq JSON parser, and cfn-signal stuff
            yum install -y awslogs jq

            # Inject the CloudWatch Logs configuration file contents
            cat > /etc/awslogs/awslogs.conf <<- EOF
            [general]
            state_file = /var/lib/awslogs/agent-state

            [/var/log/dmesg]
            file = /var/log/dmesg
            log_group_name = /${AWS::StackName}-${ResourceId}/dmesg
            log_stream_name = {instance_id}

            [/var/log/messages]
            file = /var/log/messages
            log_group_name = /${AWS::StackName}-${ResourceId}/messages
            log_stream_name = {instance_id}
            datetime_format = %b %d %H:%M:%S

            [/var/log/secure]
            file = /var/log/secure
            log_group_name = /${AWS::StackName}-${ResourceId}/secure
            log_stream_name = {instance_id}

            [/var/log/auth.log]
            file = /var/log/auth.log
            log_group_name = /${AWS::StackName}-${ResourceId}/auth.log
            log_stream_name = {instance_id}

            EOF

            exec 2>>/var/log/cloudwatch-logs-start.log
            set -x

            # Grab the instance id ARN from instance metadata
            instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)

            # Replace the instance ID placeholders with the actual values
            sed -i -e "s/{instance_id}/$instance_id/g" /etc/awslogs/awslogs.conf

            service awslogs start
            chkconfig awslogs on

            ########################################################################
            # Create user logins and add their ssh key
            ########################################################################
            echo '${SSHKeys}' > ~ec2-user/users.json
            filename="user.keys"
            jq -r 'to_entries[] | "\(.key) \(.value)"' ~ec2-user/users.json > "$filename"

            while read -r user key
            do
              echo "Adding user: $user"
              useradd -m $user
              homedir=$( getent passwd "$user" | cut -d: -f6 )
              cd $homedir
              mkdir .ssh
              chmod 700 .ssh
              chown $user:$user .ssh
              echo "$key" >> .ssh/authorized_keys
              chmod 600 .ssh/authorized_keys
              chown $user:$user .ssh/authorized_keys

            done < "$filename"

            rm "$filename"
            rm ~ec2-user/users.json

            --==BOUNDARY==
            MIME-Version: 1.0
            Content-Type: text/x-shellscript

            #!/bin/bash
            # Set the region to send CloudWatch Logs data to (the region where the instance is located)
            region=$(curl 169.254.169.254/latest/meta-data/placement/availability-zone | sed s'/.$//')
            sed -i -e "s/region = us-east-1/region = $region/g" /etc/awslogs/awscli.conf

            --==BOUNDARY==
          - SSHKeys: '{"nchan":"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQClV1z02TqZebVXpK7I+WAbmknB/tYX2j5R9Z7HmWKTcxt6PMnozZbIWQp0qRWaGX25Kw8pzwhqlZylUPZpn4sge1UGkTDF+uanlHShUWuGVXwFCsYhleRdxb/gd8tlqwGhWFjv1JZ6hSML4MB9YwbAb+Qb86IBwQFkZ1t3y79frzR3rNBIv7mfmDKu3qI0s5ek91O5AqfZJYnjA9CNV856LDskjs/L3ABjStc+SoHULjymqKYv7GkqaQ4nUTZeu67JH6/8juPltXMpDmKnyGXpFdZerAys7ibMCltMLlYinopiprHVl5EktvoV2Bf9PWkFu8aML+8zuB7uA+fCrFb4PvgufhnBPu2TiZyuZc1Mi4s9byTv5hdDULikaUSZut33Y5D4H2232MlCzYoLeou7pG+NLqDopK+ZI8udT2W2FqyvU6fJ+LgA3Wnl3g9fh6L9C/TfqgqpRXuNk++q20wyxPAyr8MMn+QOtEcZaP2CPk0dY17fUp9Sx0ZkHr+KiKs= nchan"}'
            ResourceId: Bastion
  BastionSSMAgentAutoUpdate:
    Type: AWS::SSM::Association
    Properties:
      AssociationName: StackeryBastionSSMAgentAutoUpdate
      Name: AWS-UpdateSSMAgent
      ScheduleExpression: rate(1 day)
      Targets:
        - Key: tag:aws:autoscaling:groupName
          Values:
            - !Ref Bastion
  userPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
    Metadata:
      aws:cdk:path: searchStack/userPool
  cognitoDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Join
        - ''
        - - !Ref applicationPrefix
          - '-'
          - !Select
            - 4
            - !Split
              - '-'
              - !Select
                - 2
                - !Split
                  - /
                  - !Ref AWS::StackId
      UserPoolId: !Ref userPool
    Metadata:
      aws:cdk:path: searchStack/cognitoDomain
  identityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders: []
    Metadata:
      aws:cdk:path: searchStack/identityPool
  authRoleB7A6401B:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                cognito-identity.amazonaws.com:aud: !Ref identityPool
              ForAnyValue:StringLike:
                cognito-identity.amazonaws.com:amr: authenticated
            Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
        Version: 2012-10-17
    Metadata:
      aws:cdk:path: searchStack/authRole/Resource
  esRoleF5B460B7:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: es.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - !Join
          - ''
          - - 'arn:'
            - !Ref AWS::Partition
            - ':iam::aws:policy/AmazonESCognitoAccess'
    Metadata:
      aws:cdk:path: searchStack/esRole/Resource
  searchDomain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt authRoleB7A6401B.Arn
            Action:
              - es:ESHttpGet
              - es:ESHttpPut
              - es:ESHttpPost
              - es:ESHttpDelete
            Resource: !Join
              - ''
              - - 'arn:aws:es:'
                - !Ref AWS::Region
                - ':'
                - !Ref AWS::AccountId
                - ':domain/'
                - !Ref applicationPrefix
                - /*
      DomainName: !Ref applicationPrefix
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
      ElasticsearchClusterConfig:
        InstanceType: t2.small.elasticsearch
      ElasticsearchVersion: '7.1'
      CognitoOptions:
        Enabled: true
        IdentityPoolId: !Ref identityPool
        RoleArn: !GetAtt esRoleF5B460B7.Arn
        UserPoolId: !Ref userPool
    Metadata:
      aws:cdk:path: searchStack/searchDomain
  userPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref identityPool
      Roles:
        authenticated: !GetAtt authRoleB7A6401B.Arn
    Metadata:
      aws:cdk:path: searchStack/userPoolRoleAttachment
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)
  AmazonLinux2ImageId:
    Type: AWS::EC2::Image::Id
    Description: Latest Amazon Linux 2 AMI ID (injected by Stackery at deployment time)
  applicationPrefix:
    Type: String
    AllowedPattern: '^[a-z0-9]*$'
    Description: Prefix for the Amazon Cognito domain and the Amazon Elasticsearch Service domain
    MaxLength: 20
    MinLength: 3
    Default: kixie
Outputs:
  createUserUrl:
    Description: Create a new user in the user pool here.
    Value: !Join
      - ''
      - - https://
        - !Ref AWS::Region
        - .console.aws.amazon.com/cognito/users?region=
        - !Ref AWS::Region
        - '#/pool/'
        - !Ref userPool
        - /users
  kibanaUrl:
    Description: Access Kibana via this URL.
    Value: !Join
      - ''
      - - https://
        - !GetAtt searchDomain.DomainEndpoint
        - /_plugin/kibana/